[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Exploratory Data Analysis\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nDec 7, 2023\n\n\nErik Lorimor\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/EDA/index.html",
    "href": "posts/EDA/index.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Using a variety of tools we’ll dive in to understand the data we’ll be working with using the widely available R language.\nFirst step is to load the libraries that will be used during EDA and load an internal data set for Road Casualties in Great Britain 1969-84\nRoad Casualties in Great Britain 1969-84\n\nlibrary(corrplot)\n\ncorrplot 0.92 loaded\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\n\ndata(\"Seatbelts\")\nuk_deaths &lt;- data.frame(Seatbelts)\n\nWe’ll start off by looking at the first few rows and looking at some other important EDA data points such as determining number of missing values and overall size of the data.\n\nhead(uk_deaths)\n\n  DriversKilled drivers front rear   kms PetrolPrice VanKilled law\n1           107    1687   867  269  9059   0.1029718        12   0\n2            97    1508   825  265  7685   0.1023630         6   0\n3           102    1507   806  319  9963   0.1020625        12   0\n4            87    1385   814  407 10955   0.1008733         8   0\n5           119    1632   991  454 11823   0.1010197        10   0\n6           106    1511   945  427 12391   0.1005812        13   0\n\nstr(uk_deaths)\n\n'data.frame':   192 obs. of  8 variables:\n $ DriversKilled: num  107 97 102 87 119 106 110 106 107 134 ...\n $ drivers      : num  1687 1508 1507 1385 1632 ...\n $ front        : num  867 825 806 814 991 ...\n $ rear         : num  269 265 319 407 454 427 522 536 405 437 ...\n $ kms          : num  9059 7685 9963 10955 11823 ...\n $ PetrolPrice  : num  0.103 0.102 0.102 0.101 0.101 ...\n $ VanKilled    : num  12 6 12 8 10 13 11 6 10 16 ...\n $ law          : num  0 0 0 0 0 0 0 0 0 0 ...\n\nsum(is.na(uk_deaths))\n\n[1] 0\n\ndim(uk_deaths)\n\n[1] 192   8\n\n\nNow that we have a decent idea of the data, we’ll want to see where there is some natural correlation between the different variables. We’ll use the corrplot library for this.\n\nuk_death_corr &lt;- cor(uk_deaths)\ncorrplot(uk_death_corr, method=\"color\")\n\n\n\n\nAs DriversKilled is our target variable we are looking at strong values in the plot that are colored deep red or deep blue when we travel the same x or y axis as DriversKilled. From a visual reference of the plot it would seem the largest correlation is the variable drivers. We can use a scatter plot for viewing the relationship between DriversKilled and drivers.\n\nuk_death_corr\n\n              DriversKilled    drivers      front        rear        kms\nDriversKilled     1.0000000  0.8888264  0.7067596  0.35335102 -0.3211016\ndrivers           0.8888264  1.0000000  0.8084114  0.34366850 -0.4447631\nfront             0.7067596  0.8084114  1.0000000  0.62022476 -0.3573823\nrear              0.3533510  0.3436685  0.6202248  1.00000000  0.3330069\nkms              -0.3211016 -0.4447631 -0.3573823  0.33300689  1.0000000\nPetrolPrice      -0.3866061 -0.4576675 -0.5392394 -0.13262721  0.3839004\nVanKilled         0.4070412  0.4853995  0.4724207  0.12175808 -0.4980356\nlaw              -0.3285051 -0.4452269 -0.5624455  0.02906753  0.4905494\n              PetrolPrice  VanKilled         law\nDriversKilled  -0.3866061  0.4070412 -0.32850510\ndrivers        -0.4576675  0.4853995 -0.44522689\nfront          -0.5392394  0.4724207 -0.56244554\nrear           -0.1326272  0.1217581  0.02906753\nkms             0.3839004 -0.4980356  0.49054938\nPetrolPrice     1.0000000 -0.2885584  0.39069323\nVanKilled      -0.2885584  1.0000000 -0.39494121\nlaw             0.3906932 -0.3949412  1.00000000\n\nplot(uk_deaths$drivers, uk_deaths$DriversKilled,\n     xlab = \"Drivers\",\n     ylab = \"Deaths\")\n\n\n\n\nThis shows a great linear correlation! We should be able to use models that work well with linear regression to further study this data. We can see between the two plots and the correlation table that drivers are most likely to be killed in accidents, we can further see there is another positive correlation with front passengers that could be valuable."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Erik Lorimor",
    "section": "",
    "text": "Ever since my youth I’ve been intrigued with building things, or taking them apart to see how they work. After many decades of discovery my next journey is once again in the field of academics. I am currently working on a Masters degree in Data Science, specializing in Artificial Intelligence. I have had a great career in software engineering and data analysis working at Sun Microsystems since 2000 and most recently at Oracle.\nI spend most of my time with my wife and our children. I also enjoy mountain biking or carving wood."
  }
]